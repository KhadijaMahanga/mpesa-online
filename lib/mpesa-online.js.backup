/**
 *  mpesa-online
 *  Copyright(c) 2018 Njunge Njenga
 *  MIT Licensed
 */

'use strict'

/**
 *  Module dependencies
 */
const request = require('request')
const Buffer = require('safe-buffer').Buffer

// Parameters required by the lib to make an mpesa payment
const requiredParams =
[
  'BusinessShortCode',
  'TransactionType',
  'Amount',
  'PartyA',
  'PartyB',
  'PhoneNumber',
  'CallBackURL',
  'AccountReference',
  'TransactionDesc',
  'consumerKey',
  'consumerSecret',
  'passKey',
  'authenticationURL',
  'processRequestURL'
]

module.exports = class MpesaOnline {
  constructor (params) {
    this.params = params
  }

  /**
   * Get the accessToken and make a Lipa na M-Pesa Online Payment
   *
   * @returns {Promise}
   */
  makeMpesaOnlinePayment () {
    return new Promise((resolve, reject) => {
      let emptyParams
      let missingParams = ''
      let paramsArray = []

      // Check if any of the passed params are empty
      Object.keys(this.params).map((param) => {
        if (!this.params[param]) {
          emptyParams += param + ', '
        }
        paramsArray.push(param)
      })

      // Compare the required params to what has been passed. If there's any difference return the missing params.
      requiredParams.filter((param, index) => {
        const missingParam = paramsArray.indexOf(param) === -1

        if (missingParam) {
          missingParams += param + ', '
        }
      })

      // return the missing params
      if (missingParams) {
        const result = { errorCode: 400, errorMessage: 'missing param(s) ' + missingParams.slice(0, -2) }
        reject(result)
      }

      // return the params with empty values
      if (emptyParams) {
        const result = { errorCode: 400, errorMessage: emptyParams.slice(0, -2) + ' param(s) cannot be empty' }
        reject(result)
      }

      const auth = 'Basic ' + new Buffer(this.params.consumerKey + ':' + this.params.consumerSecret).toString('base64')
      const authParams = {
        url: this.params.authenticationURL,
        headers: { 'Authorization': auth }
      }

      request(authParams, (error, response, body) => {
        if (error) throw error
        if (response.statusCode === 200) {
          const accessToken = JSON.parse(body).access_token

          delete this.params.consumerKey
          delete this.params.consumerSecret
          delete this.params.authenticationURL

          const timeStamp = new Date().toISOString().slice(-24).replace(/\D/g, '').slice(0, 14)
          const password = new Buffer(this.params.BusinessShortCode + this.params.passKey + timeStamp).toString('base64')
          const processRequestURL = this.params.processRequestURL
          this.params.Password = password
          this.params.Timestamp = timeStamp

          delete this.params.processRequestURL
          delete this.params.passKey

          const processRequestParams = {
            method: 'POST',
            url: processRequestURL,
            headers: { 'Authorization': 'Bearer ' + accessToken },
            json: this.params
          }

          request(processRequestParams, (error, response, body) => {
            if (error) throw error
            if (response.statusCode === 200) {
              resolve(body)
            } else {
              reject(body)
            }
          })
        } else if (!body) {
          const result = {errorCode: 400, errorMessage: 'Ensure your consumerKey or consumerSecret are valid '}
          reject(result)
        } else {
          reject(body)
        }
      })
    })
  }
}
